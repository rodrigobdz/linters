#!/usr/bin/env bash
#
# Install project dependencies for Ubuntu.

set -o errexit
set -o pipefail
set -o nounset

# shellcheck disable=SC1091
source utils.sh

readonly CIRCLECI=${CIRCLECI:-'no'}
readonly LOG_FILENAME=${LOG_FILENAME:-"$LOG_DIR/bootstrap-ubuntu.log"}

declare APT_UP_TO_DATE='no'

welcome() {
  fancy_echo "Installing project dependencies for Ubuntu."
  check_sudo
}

install_apt_pkg_if_uninstalled() {
  local -r binary_name="$1"
  if dpkg --status "$binary_name" >/dev/null 2>&1; then
    fancy_echo "Skipping installation of $binary_name, already installed"
    return
  fi

  if [ "$APT_UP_TO_DATE" = 'no' ]; then
    sudo apt-get update
    APT_UP_TO_DATE='yes'
  fi

  fancy_echo "Installing apt package $binary_name"
  apt-get install --yes "$binary_name"
}

install_curl() {
  local -r binary_name="curl"
  # Skip if package already installed
  if [ -x "$(command -v "$binary_name")" ]; then
    fancy_echo "Skipping installation of $binary_name, already installed."
    return
  fi

  fancy_echo "Setting up $binary_name"
  install_apt_pkg_if_uninstalled "$binary_name"
}

setup() {
  install_curl
}

install_shfmt() {
  local -r binary_name="shfmt"
  # Skip if package already installed
  if [ -x "$(command -v "$binary_name")" ]; then
    fancy_echo "Skipping installation of $binary_name, already installed."
    return
  fi

  fancy_echo "Installing shfmt"
  local -r shfmt_path='/usr/local/bin/shfmt'
  local -r shfmt_version='v2.6.4'
  local -r shfmt_platform='linux'
  local -r shfmt_extension='amd64'
  local -r url="https://github.com/mvdan/sh/releases/download/${shfmt_version}/shfmt_${shfmt_version}_${shfmt_platform}_${shfmt_extension}"
  curl -fsSL "$url" --output "$shfmt_path"
  chmod a+x "$shfmt_path"
}

install_shellcheck() {
  local -r binary_name="shellcheck"
  # Skip if package already installed
  if [ -x "$(command -v "$binary_name")" ]; then
    fancy_echo "Skipping installation of $binary_name, already installed."
    return
  fi

  local -r shellcheck_binary="/usr/bin/$binary_name"
  fancy_echo "Installing $binary_name"
  install_apt_pkg_if_uninstalled "$binary_name"

  if [ ! -f "$shellcheck_binary" ]; then
    err_exit "Shellcheck binary not found at $shellcheck_binary."
  fi

  sudo ln -sf "/usr/bin/${binary_name}" "/usr/local/bin/${binary_name}"
}

install_npm() {
  if [ "$CIRCLECI" = true ]; then
    fancy_echo "Make node and npm available to root"
    sudo --login --user "$MY_USER" nvm alias default node
  fi

  local -r binary_name="npm"
  # Skip if package already installed
  if [ -x "$(command -v "$binary_name")" ]; then
    fancy_echo "Skipping installation of $binary_name, already installed."
    return
  fi

  # Source: https://www.digitalocean.com/community/tutorials/how-to-install-node-js-on-ubuntu-18-04
  local -r npm_version='10.x'
  fancy_echo "Installing $binary_name"
  (
    cd ~
    fancy_echo "Retrieve the installation script for $npm_version"
    curl -sL "https://deb.nodesource.com/setup_$npm_version" -o nodesource_setup.sh
    fancy_echo "Run npm installation script. PPA will be added"
    sudo bash nodesource_setup.sh
    fancy_echo "Install the Node.js apt package"
    install_apt_pkg_if_uninstalled nodejs
    fancy_echo "Check nodejs version"
    nodejs -v
    fancy_echo "Check $binary_name version"
    npm -v
    fancy_echo "Install build-essential for $binary_name packages that require compiling code from source to work"
    install_apt_pkg_if_uninstalled build-essential
  )
}

install_markdownlint() {
  if [ "$CI" = true ]; then
    fancy_echo "CI detected. Installing markdownlint globally using npm"
    npm install -g markdownlint-cli
  fi
}

install_dependencies() {
  fancy_echo "Installing dependencies"

  for binary_name in unzip python-pip pigz; do
    if [ "$binary_name" = 'python-pip' ]; then
      binary_name='pip'
    fi

    # Skip if package already installed
    if [ -x "$(command -v "$binary_name")" ]; then
      fancy_echo "Skipping installation of $binary_name, already installed."
      continue
    fi

    install_apt_pkg_if_uninstalled "$binary_name"
  done

  install_shellcheck
  install_npm
  install_shfmt
  install_markdownlint

  fancy_echo "Cleaning old pre-commit hooks"
  rm -f .git/hooks/pre-commit

  fancy_echo "Installing npm modules"
  sudo --login --user "$MY_USER" bash -c "cd $(pwd) && npm install"
}

main() {
  welcome
  setup
  install_dependencies
  summary
}

main "$@" 2>&1 | tee "$LOG_FILENAME"
